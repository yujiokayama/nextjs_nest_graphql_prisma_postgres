// import gql from 'graphql-tag'
import type { GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import { initUrqlClient, withUrqlClient } from 'next-urql'
import React, { useCallback, useState } from 'react'
import { ssrExchange, useMutation, useQuery } from 'urql'

import Navigation from '@/components/Navigation'
import {
  CreateUserDocument,
  GetUsersDocument,
  User,
} from '@/graphql/generated.graphql'
import styles from '@/styles/Home.module.css'

const GRAPHQL_ENDPOINT = 'http://localhost:8080/api/graphql'
// const GRAPHQL_ENDPOINT = process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT as string

const GraphqlTest: NextPage = () => {
  // Query
  const [res] = useQuery({ query: GetUsersDocument })
  const getDate = (date: string) => {
    return new Date(date).toLocaleString()
  }

  // Mutation
  const [displayName, setDisplayName] = useState<string>('')
  const [username, setUserName] = useState<string>('')

  const [, executeMutation] = useMutation(CreateUserDocument)

  const CreateUser = useCallback(() => {
    executeMutation({ displayName, username })
  }, [executeMutation, displayName, username])

  const handleSetDisplayName = (event: React.ChangeEvent<HTMLInputElement>) => {
    setDisplayName(event.target.value)
  }
  const handleSetUserName = (event: React.ChangeEvent<HTMLInputElement>) => {
    setUserName(event.target.value)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Navigation />
        <p>Query</p>
        <div>
          {res.data?.users.map((user: User) => (
            <div key={user.id}>
              <dl>
                <dt>{user.id}</dt>
                <dd>{user.username}</dd>
                <dd>{user.displayName}</dd>
                <dd>{getDate(user.createdAt)}</dd>
              </dl>
            </div>
          ))}
        </div>
        <p>Mutation</p>
        <input
          type="text"
          name="displayName"
          id=""
          value={displayName}
          onChange={handleSetDisplayName}
        />
        <input
          type="text"
          name="username"
          id=""
          value={username}
          onChange={handleSetUserName}
        />
        <button onClick={() => CreateUser()}>選手登録</button>
      </main>

      <footer className={styles.footer} />
    </div>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const ssrCache = ssrExchange({ isClient: false })
  const client = initUrqlClient(
    {
      url: GRAPHQL_ENDPOINT,
    },
    false,
  )

  // This query is used to populate the cache for the query
  // used on this page.
  await client?.query(GetUsersDocument).toPromise()

  return {
    props: {
      users: ssrCache.extractData(),
    },
    revalidate: 600,
  }
}

export default withUrqlClient(
  () => ({
    url: GRAPHQL_ENDPOINT,
  }),
  { ssr: false }, // Important so we don't wrap our component in getInitialProps
)(GraphqlTest)
